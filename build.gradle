/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not set. Please set it as an environment variable or Gradle project property.")
}

task distributeExtension {
	group "Ghidra"

	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
	dependsOn ':buildExtension'
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

sourceSets {
	integrationTest {
		java {
			srcDirs = ['src/test.slow/java']
		}
		resources {
			srcDirs = ['src/test.slow/resources']
		}
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
}

repositories {
	// Declare dependency repositories here.  This is not needed if dependencies are manually
	// dropped into the lib/ directory.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html for more info.
	// Ex: mavenCentral()
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven {
		name = 'Central Portal Snapshots'
		url = 'https://central.sonatype.com/repository/maven-snapshots/'
	}
}

dependencies {
	// Any external dependencies added here will automatically be copied to the lib/ directory when
	// this extension is built.
	implementation platform("io.modelcontextprotocol.sdk:mcp-bom:0.10.0")
	implementation "io.modelcontextprotocol.sdk:mcp"
	implementation "jakarta.servlet:jakarta.servlet-api:6.1.0"
	// Add Jetty for embedded servlet support
	implementation "org.eclipse.jetty:jetty-server:11.0.16"
	implementation "org.eclipse.jetty:jetty-servlet:11.0.16"

	// Testing dependencies
	testImplementation "org.mockito:mockito-core:5.18.0"
	testImplementation "org.mockito:mockito-inline:5.2.0"
	testImplementation "com.fasterxml.jackson.core:jackson-databind:2.17.0"

	// Ghidra test dependencies
	testImplementation "org.hamcrest:hamcrest:2.2"
	testImplementation "junit:junit:4.13.2"

	// Integration test dependencies inherit from testImplementation via configurations block

	// PCode test dependencies (uncomment if you have PCode tests)
	// pcodeTestImplementation "junit:junit:4.13.2"
}

task integrationTest(type: Test) {
	group 'verification'
	description 'Runs integration tests (tests that require GUI/headed environment)'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	
	// Fork every test to prevent configuration conflicts
	forkEvery 1
	
	// These tests require a GUI environment
	systemProperty 'java.awt.headless', 'false'
	
	// Exclude suite classes
	exclude '**/*Suite*'
}

// Make check depend on integrationTest
check.dependsOn integrationTest

// Exclude additional files from the built extension
// Ex: buildExtension.exclude '.idea/**'
