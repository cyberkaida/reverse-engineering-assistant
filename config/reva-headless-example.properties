# ReVa Headless Configuration Example
#
# This file shows all available configuration options for ReVa in headless mode.
# Copy this file and customize it for your needs.
#
# Usage:
#   python scripts/reva_headless_server.py --config config/reva-headless.properties

# Server Configuration
# Port number for the MCP server (default: 8080)
reva.server.options.server.port=8080

# Host interface to bind to (default: 127.0.0.1)
# Use 127.0.0.1 for localhost only (recommended for security)
# Use 0.0.0.0 to accept connections from any interface (use with caution!)
reva.server.options.server.host=127.0.0.1

# Whether the server is enabled (default: true)
reva.server.options.server.enabled=true

# API Key Authentication
# Enable API key authentication for MCP server access (default: false)
reva.server.options.api.key.authentication.enabled=false

# API key required for access when authentication is enabled
# Generate a secure random key for production use
reva.server.options.api.key=ReVa-change-this-to-a-secure-random-key

# Debug Configuration
# Enable debug mode for additional logging (default: false)
reva.server.options.debug.mode=false

# Decompiler Configuration
# Maximum number of functions before warning about decompiler search (default: 1000)
reva.server.options.max.decompiler.search.functions=1000

# Timeout in seconds for decompiler operations (default: 10)
reva.server.options.decompiler.timeout.seconds=10

# Security Notes:
# 1. Keep API keys secure - never commit them to version control
# 2. Use API key authentication in production environments
# 3. Bind to 127.0.0.1 unless you need remote access
# 4. When using 0.0.0.0, always enable API key authentication
# 5. Use HTTPS reverse proxy for production deployments

# Performance Notes:
# 1. Higher decompiler timeout allows more complex analysis but slower responses
# 2. Lower max functions limit prevents accidental full-program decompilation
# 3. Debug mode adds overhead - disable in production
