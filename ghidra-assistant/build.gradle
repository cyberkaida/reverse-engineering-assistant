/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

plugins {
  id "com.google.protobuf" version "0.9.4"
}

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

repositories {
	// Declare dependency repositories here.  This is not needed if dependencies are manually
	// dropped into the lib/ directory.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html for more info.
	// Ex: mavenCentral()
	mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
	implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '4.26.1'
	// https://mvnrepository.com/artifact/com.google.protobuf/protoc
	implementation group: 'com.google.protobuf', name: 'protoc', version: '4.26.1'
	// https://mvnrepository.com/artifact/com.google.protobuf/protobuf-gradle-plugin
	runtimeOnly group: 'com.google.protobuf', name: 'protobuf-gradle-plugin', version: '0.9.4'

	runtimeOnly 'io.grpc:grpc-netty-shaded:1.63.0'
	implementation 'io.grpc:grpc-protobuf:1.63.0'
	implementation 'io.grpc:grpc-stub:1.63.0'
	compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
}

sourceSets {
  main {
    proto {
      // This is in addition to the default 'src/main/proto'
      srcDir '../protocol'
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:4.26.1"
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.63.0'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

["extractIncludeProto", "extractIncludeTestProto"].each { taskName ->
    tasks.named(taskName).configure {
        dependsOn "copyDependencies"
    }
}

// Exclude additional files from the built extension
// Ex: buildExtension.exclude '.idea/**'
