/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package reva.plugin;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import ghidra.framework.options.ToolOptions;
import ghidra.framework.plugintool.PluginTool;
import reva.RevaIntegrationTestBase;

/**
 * Test class for ConfigManager security-related configuration options.
 */
public class ConfigManagerSecurityTest extends RevaIntegrationTestBase {

    private ConfigManager configManager;

    @Before
    public void setUp() throws Exception {
        // Clear any existing configuration to start fresh
        ToolOptions options = tool.getOptions(ConfigManager.SERVER_OPTIONS);
        options.removeOption(ConfigManager.SERVER_HOST);
        options.removeOption(ConfigManager.API_KEY_ENABLED);
        options.removeOption(ConfigManager.API_KEY);

        // Create a fresh ConfigManager for each test to avoid state pollution
        // This will register default options and generate a new API key
        configManager = new ConfigManager(tool);
    }

    @Test
    public void testDefaultHostConfiguration() {
        // Test that the default host is localhost (secure by default)
        String defaultHost = configManager.getServerHost();
        assertEquals("Default host should be localhost for security", "127.0.0.1", defaultHost);
    }

    @Test
    public void testDefaultApiKeyConfiguration() {
        // Test that API key authentication is disabled by default
        boolean apiKeyEnabled = configManager.isApiKeyEnabled();
        assertFalse("API key authentication should be disabled by default", apiKeyEnabled);

        // Test that an API key is generated by default
        String apiKey = configManager.getApiKey();
        assertNotNull("API key should not be null", apiKey);
        assertFalse("API key should not be empty", apiKey.trim().isEmpty());
        assertTrue("API key should start with 'ReVa-'", apiKey.startsWith("ReVa-"));
        assertTrue("API key should contain a UUID", apiKey.length() > 10);
    }

    @Test
    public void testHostConfigurationUpdate() {
        // Test updating the host configuration
        String newHost = "0.0.0.0";
        configManager.setServerHost(newHost);
        assertEquals("Host should be updated", newHost, configManager.getServerHost());
    }

    @Test
    public void testApiKeyConfigurationUpdate() {
        // Test enabling API key authentication
        configManager.setApiKeyEnabled(true);
        assertTrue("API key authentication should be enabled", configManager.isApiKeyEnabled());

        // Test setting a custom API key
        String customApiKey = "ReVa-custom-test-key";
        configManager.setApiKey(customApiKey);
        assertEquals("Custom API key should be set", customApiKey, configManager.getApiKey());
    }

    @Test
    public void testApiKeyGenerationFormat() {
        // Test that generated API keys follow the expected format
        String apiKey = configManager.getApiKey();
        String[] parts = apiKey.split("-", 2);

        assertEquals("API key should start with 'ReVa'", "ReVa", parts[0]);
        assertEquals("API key should have UUID part", 2, parts.length);
        assertTrue("UUID part should be non-empty", parts[1].length() > 0);
        // UUID with dashes is typically 36 characters, but let's be more lenient
        assertTrue("UUID part should be reasonable length", parts[1].length() >= 10);
    }

    @Test
    public void testConfigurationPersistence() {
        // Test that configuration changes are persisted through the options system
        ToolOptions options = tool.getOptions(ConfigManager.SERVER_OPTIONS);

        // Set values through ConfigManager
        configManager.setServerHost("192.168.1.100");
        configManager.setApiKeyEnabled(true);
        configManager.setApiKey("ReVa-test-persistence");

        // Verify values are stored in tool options
        assertEquals("Host should be persisted in options",
                     "192.168.1.100", options.getString(ConfigManager.SERVER_HOST, null));
        assertTrue("API key enabled should be persisted in options",
                   options.getBoolean(ConfigManager.API_KEY_ENABLED, false));
        assertEquals("API key should be persisted in options",
                     "ReVa-test-persistence", options.getString(ConfigManager.API_KEY, null));
    }
}